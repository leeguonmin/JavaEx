package com.javaex.jdbc.dao;

import java.util.List;

// 작가가 정보를 다루는 모든 클래스들이 꼭 구현해야 할 메소드들을 
// 정의한 규약과 같은 것 
// 마시 도서관에서 사서가 책을 관리할때, 따라ㅇ하는 규칙과 비슷

// 인터페이스를 통한 이점 
// 1. 코드의 일관성 : 모든 작가 관련 작업은 이 인터페이스에서 정의된 메소들르 통해 이루엊져서 일관성생김
// 2. 유지보수의 용이성 : 코드를 수정하거나 새로운 기능을 추가할 때 이 인터페이스만을 참고하면 됨
// 3. 다양한 구현 : 이 인터페이스를 구현하는 다양한 클래스를 만들 수 있음. 예를 들어, 
// 다른 데이터베이스를 사용하는 클래스를 만들거나, 캐시 기능을 추가한 클래스를 만들거나 할 수 있음

public interface AuthorDao {
	public List<AuthorVo> getList();		// 전체 작가 목록
	// 모든 작가 정보를 목록 형태로 가져와
	public List<AuthorVo> search(String keyword);		// 검색 
	// 특정 키워드를 포함하는 작가를 검색 
	public AuthorVo get(Long id);
	// 특정 아이드를 가진 작가 정보를 가져와
	public boolean insert(AuthorVo vo);
	// 새로운 작가 정보를 추가해 
	public boolean update(AuthorVo vo);
	// 기존 작가 정보를 수정 업데이트해
	public boolean delete(Long id);
	// 특정 아이디를 가진 작가 정보를 삭제해~
}


// 인터페이스를 사용하는 이유
// 1. 코드 재사용 : 한번 작성된 메서도를 여러 곳에 재사용 할 수 잇음 
// 2. 테스트 용이 : 각 메소드를 개별적으로 테스트할 수 있어, 코드의 품질을 업 
// 3. 다양한 환경 적용 : 데이ㅌ터베이스 종류, 캐시 사용 여부 등에 따라 다른 구현체를 사용할수잇음

// 예를 들어, AuthorDaoImpl이라는 클래스가 
// AuthorDao 인터페이스를 구현하여 실제로 데이터베이스에 접속하여 작가 정보를 관리한다고 가정
// . 이렇게 하면 다른 부분의 코드에서는 
// AuthorDao 인터페이스를 통해 작가 정보를 다루면 되기 때문에
// 결합도를 낮추고 유지보수성을 높일 수 있음

